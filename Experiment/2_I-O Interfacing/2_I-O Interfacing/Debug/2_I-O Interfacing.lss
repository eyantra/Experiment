
2_I-O Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006e4  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000950  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003d4  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c5  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ac  00000000  00000000  00000e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000094  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000124  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000003e  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e8       	ldi	r30, 0x8C	; 140
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 30       	cpi	r26, 0x00	; 0
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
 122:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <buzzer_pin_config>:
#include <util/delay.h>

//Function to initialize Buzzer 
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 12a:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 12c:	43 98       	cbi	0x08, 3	; 8
}
 12e:	08 95       	ret

00000130 <interrupt_switch_config>:

//Function to configure Interrupt switch
void interrupt_switch_config (void)
{
 DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input  
 130:	6f 98       	cbi	0x0d, 7	; 13
 PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled
 132:	77 9a       	sbi	0x0e, 7	; 14
}
 134:	08 95       	ret

00000136 <LED_bargraph_config>:

//Function to configure LDD bargraph display
void LED_bargraph_config (void)
{
 DDRJ = 0xFF;  //PORT J is configured as output
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	80 93 04 01 	sts	0x0104, r24
 PORTJ = 0x00; //Output is set to 0
 13c:	10 92 05 01 	sts	0x0105, r1
}
 140:	08 95       	ret

00000142 <port_init>:

//Function to Initialize PORTS
void port_init (void)
{
 buzzer_pin_config();
 142:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_pin_config>
 interrupt_switch_config();
 146:	0e 94 98 00 	call	0x130	; 0x130 <interrupt_switch_config>
 LED_bargraph_config();
 14a:	0e 94 9b 00 	call	0x136	; 0x136 <LED_bargraph_config>
}
 14e:	08 95       	ret

00000150 <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
 150:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
 152:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
 154:	88 b9       	out	0x08, r24	; 8
}
 156:	08 95       	ret

00000158 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
 158:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
 15a:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
 15c:	88 b9       	out	0x08, r24	; 8
}
 15e:	08 95       	ret

00000160 <init_devices>:

void init_devices (void)
{
 cli(); //Clears the global interrupts
 160:	f8 94       	cli
 port_init();
 162:	0e 94 a1 00 	call	0x142	; 0x142 <port_init>
 sei(); //Enables the global interrupts
 166:	78 94       	sei
}
 168:	08 95       	ret

0000016a <main>:


//Main Function
int main(void)
{
	init_devices();
 16a:	0e 94 b0 00 	call	0x160	; 0x160 <init_devices>
	while(1)
	{
	if((PINE & 0x80) == 0x80) //switch is not pressed
		{
			buzzer_off(); //Turn off buzzer
			PORTJ = 0x00; //Turn off bargraph LEDs			
 16e:	c5 e0       	ldi	r28, 0x05	; 5
 170:	d1 e0       	ldi	r29, 0x01	; 1
		}
	else
		{
			
			buzzer_on(); //Turn on buzzer
			PORTJ = 0xFF; //Turn on bargraph LEDs
 172:	1f ef       	ldi	r17, 0xFF	; 255
int main(void)
{
	init_devices();
	while(1)
	{
	if((PINE & 0x80) == 0x80) //switch is not pressed
 174:	67 9b       	sbis	0x0c, 7	; 12
 176:	04 c0       	rjmp	.+8      	; 0x180 <main+0x16>
		{
			buzzer_off(); //Turn off buzzer
 178:	0e 94 ac 00 	call	0x158	; 0x158 <buzzer_off>
			PORTJ = 0x00; //Turn off bargraph LEDs			
 17c:	18 82       	st	Y, r1
 17e:	fa cf       	rjmp	.-12     	; 0x174 <main+0xa>
		}
	else
		{
			
			buzzer_on(); //Turn on buzzer
 180:	0e 94 a8 00 	call	0x150	; 0x150 <buzzer_on>
			PORTJ = 0xFF; //Turn on bargraph LEDs
 184:	18 83       	st	Y, r17
 186:	f6 cf       	rjmp	.-20     	; 0x174 <main+0xa>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
