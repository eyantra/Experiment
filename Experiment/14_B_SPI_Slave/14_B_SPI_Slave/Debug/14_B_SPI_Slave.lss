
14_B_SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000013a  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000890  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003e7  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f8  00000000  00000000  00000cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b1  00000000  00000000  00000def  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f7  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000041  00000000  00000000  0000120b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ec       	ldi	r30, 0xC6	; 198
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	27 d0       	rcall	.+78     	; 0xa8 <main>
  5a:	33 c0       	rjmp	.+102    	; 0xc2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <port_init>:
unsigned char ADC_Value;

//Port initialization
void port_init(void)
{
 PORTB = 0x10;
  5e:	80 e1       	ldi	r24, 0x10	; 16
  60:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x10;
  62:	87 bb       	out	0x17, r24	; 23
 PORTC = 0x3F; 
  64:	8f e3       	ldi	r24, 0x3F	; 63
  66:	85 bb       	out	0x15, r24	; 21
 DDRC  = 0x00;
  68:	14 ba       	out	0x14, r1	; 20
 PORTD = 0x00;
  6a:	12 ba       	out	0x12, r1	; 18
 DDRD  = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
}
  70:	08 95       	ret

00000072 <spi_init>:

//SPI initialize
void spi_init(void)
{
 SPCR = 0x41; //setup SPI
  72:	81 e4       	ldi	r24, 0x41	; 65
  74:	8d b9       	out	0x0d, r24	; 13
 SPSR = 0x00; //setup SPI
  76:	1e b8       	out	0x0e, r1	; 14
 SPDR = 0x00;
  78:	1f b8       	out	0x0f, r1	; 15
}
  7a:	08 95       	ret

0000007c <adc_init>:

//ADC initialize
// Conversion time: 52uS
void adc_init(void)
{
 ADCSR = 0x00; //disable adc
  7c:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x00; //select adc input 0
  7e:	17 b8       	out	0x07, r1	; 7
 ACSR  = 0x80;
  80:	80 e8       	ldi	r24, 0x80	; 128
  82:	88 b9       	out	0x08, r24	; 8
 ADCSR = 0xC5;
  84:	85 ec       	ldi	r24, 0xC5	; 197
  86:	86 b9       	out	0x06, r24	; 6
}
  88:	08 95       	ret

0000008a <ADC_Conversion>:
//Function for ADC conversion
unsigned char ADC_Conversion(unsigned char channel)
{
	unsigned char adc_data = 0;

	channel = channel & 0x07;			  //Store only 3 LSB bits
  8a:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20 | channel;				  //Select the ADC channel with left adjust select
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	87 b9       	out	0x07, r24	; 7
	ADCSRA = ADCSRA | 0x40;			  	  //Set start conversion bit
  90:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
  92:	34 9b       	sbis	0x06, 4	; 6
  94:	fe cf       	rjmp	.-4      	; 0x92 <ADC_Conversion+0x8>
	adc_data = ADCH;
  96:	85 b1       	in	r24, 0x05	; 5
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
  98:	34 9a       	sbi	0x06, 4	; 6
	return adc_data; //return the ADC value
}
  9a:	08 95       	ret

0000009c <init_devices>:

//Function To Iitialize All The Peripherals
void init_devices(void)
{
 cli(); 			//disable all interrupts
  9c:	f8 94       	cli
 port_init();
  9e:	df df       	rcall	.-66     	; 0x5e <port_init>
 spi_init();
  a0:	e8 df       	rcall	.-48     	; 0x72 <spi_init>
 adc_init();
  a2:	ec df       	rcall	.-40     	; 0x7c <adc_init>
 sei();				//re-enable interrupts
  a4:	78 94       	sei
}
  a6:	08 95       	ret

000000a8 <main>:


//Main Function
int main(void)
{
 init_devices();
  a8:	f9 df       	rcall	.-14     	; 0x9c <init_devices>
 
 while(1)
 {
 while((SPSR & 0x80) == 0x00); //wait for data reception to complete
  aa:	77 9b       	sbis	0x0e, 7	; 14
  ac:	fe cf       	rjmp	.-4      	; 0xaa <main+0x2>
 data = SPDR;
  ae:	8f b1       	in	r24, 0x0f	; 15
  b0:	80 93 61 00 	sts	0x0061, r24
 //_delay_ms(1);
 //data = data + 1;
 ADC_Value = ADC_Conversion(data);
  b4:	ea df       	rcall	.-44     	; 0x8a <ADC_Conversion>
  b6:	80 93 60 00 	sts	0x0060, r24
 SPDR = ADC_Value;
  ba:	8f b9       	out	0x0f, r24	; 15
 while((SPSR & 0x80) == 0x00); //wait for data transmission to complete
  bc:	77 9b       	sbis	0x0e, 7	; 14
  be:	fe cf       	rjmp	.-4      	; 0xbc <main+0x14>
  c0:	f4 cf       	rjmp	.-24     	; 0xaa <main+0x2>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
