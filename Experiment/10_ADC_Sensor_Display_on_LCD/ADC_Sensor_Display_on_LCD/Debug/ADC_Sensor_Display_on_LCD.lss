
ADC_Sensor_Display_on_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000dce  00000e62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800200  00800200  00000e62  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b6c  00000000  00000000  00004260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004dcc  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a0  00000000  00000000  00004dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b1c  00000000  00000000  00004e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000021a  00000000  00000000  000059b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000041f  00000000  00000000  00005bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000150  00000000  00000000  00005ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c0  00000000  00000000  00006140  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000539  00000000  00000000  00006400  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  00006939  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
   4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
   8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
   c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  14:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  18:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  1c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  20:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  24:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  28:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  30:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  38:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  3c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  40:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  44:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  48:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  4c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  50:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  54:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  58:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  5c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  60:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  68:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  6c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  70:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  74:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  78:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  7c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  80:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  84:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  88:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  8c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  90:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  94:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  98:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  9c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  a0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  a4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  a8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  ac:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  b0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  b4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  b8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  bc:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  c0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  c4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  c8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  cc:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  d0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  d4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  d8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  dc:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  e0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
  e4:	07 63       	ori	r16, 0x37	; 55
  e6:	42 36       	cpi	r20, 0x62	; 98
  e8:	b7 9b       	sbis	0x16, 7	; 22
  ea:	d8 a7       	std	Y+40, r29	; 0x28
  ec:	1a 39       	cpi	r17, 0x9A	; 154
  ee:	68 56       	subi	r22, 0x68	; 104
  f0:	18 ae       	std	Y+56, r1	; 0x38
  f2:	ba ab       	std	Y+50, r27	; 0x32
  f4:	55 8c       	ldd	r5, Z+29	; 0x1d
  f6:	1d 3c       	cpi	r17, 0xCD	; 205
  f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
  fa:	57 63       	ori	r21, 0x37	; 55
  fc:	bd 6d       	ori	r27, 0xDD	; 221
  fe:	ed fd       	.word	0xfded	; ????
 100:	75 3e       	cpi	r23, 0xE5	; 229
 102:	f6 17       	cp	r31, r22
 104:	72 31       	cpi	r23, 0x12	; 18
 106:	bf 00       	.word	0x00bf	; ????
 108:	00 00       	nop
 10a:	80 3f       	cpi	r24, 0xF0	; 240
 10c:	08 00       	.word	0x0008	; ????
 10e:	00 00       	nop
 110:	be 92       	st	-X, r11
 112:	24 49       	sbci	r18, 0x94	; 148
 114:	12 3e       	cpi	r17, 0xE2	; 226
 116:	ab aa       	std	Y+51, r10	; 0x33
 118:	aa 2a       	or	r10, r26
 11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
 11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
 11e:	4c 3e       	cpi	r20, 0xEC	; 236
 120:	00 00       	nop
 122:	00 80       	ld	r0, Z
 124:	be ab       	std	Y+54, r27	; 0x36
 126:	aa aa       	std	Y+50, r10	; 0x32
 128:	aa 3e       	cpi	r26, 0xEA	; 234
 12a:	00 00       	nop
 12c:	00 00       	nop
 12e:	bf 00       	.word	0x00bf	; ????
 130:	00 00       	nop
 132:	80 3f       	cpi	r24, 0xF0	; 240
 134:	00 00       	nop
 136:	00 00       	nop
 138:	00 08       	sbc	r0, r0
 13a:	41 78       	andi	r20, 0x81	; 129
 13c:	d3 bb       	out	0x13, r29	; 19
 13e:	43 87       	std	Z+11, r20	; 0x0b
 140:	d1 13       	cpse	r29, r17
 142:	3d 19       	sub	r19, r13
 144:	0e 3c       	cpi	r16, 0xCE	; 206
 146:	c3 bd       	out	0x23, r28	; 35
 148:	42 82       	std	Z+2, r4	; 0x02
 14a:	ad 2b       	or	r26, r29
 14c:	3e 68       	ori	r19, 0x8E	; 142
 14e:	ec 82       	std	Y+4, r14	; 0x04
 150:	76 be       	out	0x36, r7	; 54
 152:	d9 8f       	std	Y+25, r29	; 0x19
 154:	e1 a9       	ldd	r30, Z+49	; 0x31
 156:	3e 4c       	sbci	r19, 0xCE	; 206
 158:	80 ef       	ldi	r24, 0xF0	; 240
 15a:	ff be       	out	0x3f, r15	; 63
 15c:	01 c4       	rjmp	.+2050   	; 0x960 <__floatsisf+0x56>
 15e:	ff 7f       	andi	r31, 0xFF	; 255
 160:	3f 00       	.word	0x003f	; ????
 162:	00 00       	nop
	...

00000166 <__ctors_end>:
 166:	11 24       	eor	r1, r1
 168:	1f be       	out	0x3f, r1	; 63
 16a:	cf ef       	ldi	r28, 0xFF	; 255
 16c:	d1 e2       	ldi	r29, 0x21	; 33
 16e:	de bf       	out	0x3e, r29	; 62
 170:	cd bf       	out	0x3d, r28	; 61
 172:	00 e0       	ldi	r16, 0x00	; 0
 174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_clear_bss>:
 176:	22 e0       	ldi	r18, 0x02	; 2
 178:	a0 e0       	ldi	r26, 0x00	; 0
 17a:	b2 e0       	ldi	r27, 0x02	; 2
 17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
 17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
 180:	aa 31       	cpi	r26, 0x1A	; 26
 182:	b2 07       	cpc	r27, r18
 184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
 186:	0e 94 05 03 	call	0x60a	; 0x60a <main>
 18a:	0c 94 e5 06 	jmp	0xdca	; 0xdca <_exit>

0000018e <__bad_interrupt>:
 18e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000192 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	86 e6       	ldi	r24, 0x66	; 102
 194:	9e e0       	ldi	r25, 0x0E	; 14
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_set_4bit+0x4>
 19a:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 19c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 19e:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 1a0:	80 e3       	ldi	r24, 0x30	; 48
 1a2:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1a4:	42 9a       	sbi	0x08, 2	; 8
 1a6:	ef ef       	ldi	r30, 0xFF	; 255
 1a8:	f7 e4       	ldi	r31, 0x47	; 71
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_set_4bit+0x18>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_set_4bit+0x1e>
 1b0:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1b2:	42 98       	cbi	0x08, 2	; 8
 1b4:	e6 e6       	ldi	r30, 0x66	; 102
 1b6:	fe e0       	ldi	r31, 0x0E	; 14
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_set_4bit+0x26>
 1bc:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1be:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1c0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 1c2:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1c4:	42 9a       	sbi	0x08, 2	; 8
 1c6:	ef ef       	ldi	r30, 0xFF	; 255
 1c8:	f7 e4       	ldi	r31, 0x47	; 71
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_set_4bit+0x38>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_set_4bit+0x3e>
 1d0:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1d2:	42 98       	cbi	0x08, 2	; 8
 1d4:	e6 e6       	ldi	r30, 0x66	; 102
 1d6:	fe e0       	ldi	r31, 0x0E	; 14
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_set_4bit+0x46>
 1dc:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1de:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1e0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 1e2:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1e4:	42 9a       	sbi	0x08, 2	; 8
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	97 e4       	ldi	r25, 0x47	; 71
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_set_4bit+0x58>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <lcd_set_4bit+0x5e>
 1f0:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1f2:	42 98       	cbi	0x08, 2	; 8
 1f4:	e6 e6       	ldi	r30, 0x66	; 102
 1f6:	fe e0       	ldi	r31, 0x0E	; 14
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_set_4bit+0x66>
 1fc:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1fe:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 200:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 202:	80 e2       	ldi	r24, 0x20	; 32
 204:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 206:	42 9a       	sbi	0x08, 2	; 8
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	97 e4       	ldi	r25, 0x47	; 71
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_set_4bit+0x7a>
 210:	00 c0       	rjmp	.+0      	; 0x212 <lcd_set_4bit+0x80>
 212:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 214:	42 98       	cbi	0x08, 2	; 8
 216:	08 95       	ret

00000218 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 218:	98 b1       	in	r25, 0x08	; 8
 21a:	9f 70       	andi	r25, 0x0F	; 15
 21c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 21e:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 220:	28 2f       	mov	r18, r24
 222:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 224:	92 2b       	or	r25, r18
 226:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 228:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 22a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 22c:	42 9a       	sbi	0x08, 2	; 8
 22e:	ef ef       	ldi	r30, 0xFF	; 255
 230:	f7 e4       	ldi	r31, 0x47	; 71
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_wr_command+0x1a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_wr_command+0x20>
 238:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 23a:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 23c:	98 b1       	in	r25, 0x08	; 8
 23e:	9f 70       	andi	r25, 0x0F	; 15
 240:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 242:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 244:	82 95       	swap	r24
 246:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 248:	89 2b       	or	r24, r25
 24a:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 24c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 24e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 250:	42 9a       	sbi	0x08, 2	; 8
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	97 e4       	ldi	r25, 0x47	; 71
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_wr_command+0x3e>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_wr_command+0x44>
 25c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 25e:	42 98       	cbi	0x08, 2	; 8
 260:	08 95       	ret

00000262 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
 262:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_set_4bit>
 266:	86 e6       	ldi	r24, 0x66	; 102
 268:	9e e0       	ldi	r25, 0x0E	; 14
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_init+0x8>
 26e:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 270:	88 e2       	ldi	r24, 0x28	; 40
 272:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_wr_command>
	lcd_wr_command(0x01);
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_wr_command>
	lcd_wr_command(0x06);
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_wr_command>
	lcd_wr_command(0x0E);
 282:	8e e0       	ldi	r24, 0x0E	; 14
 284:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_wr_command>
	lcd_wr_command(0x80);
 288:	80 e8       	ldi	r24, 0x80	; 128
 28a:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_wr_command>
 28e:	08 95       	ret

00000290 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 290:	98 b1       	in	r25, 0x08	; 8
 292:	9f 70       	andi	r25, 0x0F	; 15
 294:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 296:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 298:	28 2f       	mov	r18, r24
 29a:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 29c:	92 2b       	or	r25, r18
 29e:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 2a0:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 2a2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 2a4:	42 9a       	sbi	0x08, 2	; 8
 2a6:	ef ef       	ldi	r30, 0xFF	; 255
 2a8:	f7 e4       	ldi	r31, 0x47	; 71
 2aa:	31 97       	sbiw	r30, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <lcd_wr_char+0x1a>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <lcd_wr_char+0x20>
 2b0:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 2b2:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 2b4:	98 b1       	in	r25, 0x08	; 8
 2b6:	9f 70       	andi	r25, 0x0F	; 15
 2b8:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 2ba:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 2bc:	82 95       	swap	r24
 2be:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 2c0:	89 2b       	or	r24, r25
 2c2:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 2c4:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 2c6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 2c8:	42 9a       	sbi	0x08, 2	; 8
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	97 e4       	ldi	r25, 0x47	; 71
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <lcd_wr_char+0x3e>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <lcd_wr_char+0x44>
 2d4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 2d6:	42 98       	cbi	0x08, 2	; 8
 2d8:	08 95       	ret

000002da <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 2da:	80 e8       	ldi	r24, 0x80	; 128
 2dc:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_wr_command>
 2e0:	08 95       	ret

000002e2 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 2e2:	82 30       	cpi	r24, 0x02	; 2
 2e4:	71 f0       	breq	.+28     	; 0x302 <lcd_cursor+0x20>
 2e6:	18 f4       	brcc	.+6      	; 0x2ee <lcd_cursor+0xc>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	c9 f4       	brne	.+50     	; 0x31e <lcd_cursor+0x3c>
 2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <lcd_cursor+0x16>
 2ee:	83 30       	cpi	r24, 0x03	; 3
 2f0:	69 f0       	breq	.+26     	; 0x30c <lcd_cursor+0x2a>
 2f2:	84 30       	cpi	r24, 0x04	; 4
 2f4:	a1 f4       	brne	.+40     	; 0x31e <lcd_cursor+0x3c>
 2f6:	0f c0       	rjmp	.+30     	; 0x316 <lcd_cursor+0x34>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2f8:	86 2f       	mov	r24, r22
 2fa:	81 58       	subi	r24, 0x81	; 129
 2fc:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_wr_command>
 300:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 302:	86 2f       	mov	r24, r22
 304:	81 54       	subi	r24, 0x41	; 65
 306:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_wr_command>
 30a:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 30c:	86 2f       	mov	r24, r22
 30e:	8d 56       	subi	r24, 0x6D	; 109
 310:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_wr_command>
 314:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 316:	86 2f       	mov	r24, r22
 318:	8d 52       	subi	r24, 0x2D	; 45
 31a:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_wr_command>
 31e:	08 95       	ret

00000320 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	8a 01       	movw	r16, r20
 32a:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 32c:	88 23       	and	r24, r24
 32e:	11 f0       	breq	.+4      	; 0x334 <lcd_print+0x14>
 330:	61 11       	cpse	r22, r1
 332:	03 c0       	rjmp	.+6      	; 0x33a <lcd_print+0x1a>
	{
		lcd_home();
 334:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_home>
 338:	02 c0       	rjmp	.+4      	; 0x33e <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 33a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 33e:	c5 30       	cpi	r28, 0x05	; 5
 340:	d1 05       	cpc	r29, r1
 342:	09 f0       	breq	.+2      	; 0x346 <lcd_print+0x26>
 344:	db c0       	rjmp	.+438    	; 0x4fc <lcd_print+0x1dc>
	{
		million=value/10000+48;
 346:	98 01       	movw	r18, r16
 348:	32 95       	swap	r19
 34a:	22 95       	swap	r18
 34c:	2f 70       	andi	r18, 0x0F	; 15
 34e:	23 27       	eor	r18, r19
 350:	3f 70       	andi	r19, 0x0F	; 15
 352:	23 27       	eor	r18, r19
 354:	a7 e4       	ldi	r26, 0x47	; 71
 356:	b3 e0       	ldi	r27, 0x03	; 3
 358:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__umulhisi3>
 35c:	96 95       	lsr	r25
 35e:	87 95       	ror	r24
 360:	96 95       	lsr	r25
 362:	87 95       	ror	r24
 364:	96 95       	lsr	r25
 366:	87 95       	ror	r24
 368:	c0 96       	adiw	r24, 0x30	; 48
 36a:	90 93 01 02 	sts	0x0201, r25
 36e:	80 93 00 02 	sts	0x0200, r24
		lcd_wr_char(million);
 372:	0e 94 48 01 	call	0x290	; 0x290 <lcd_wr_char>
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
 376:	98 01       	movw	r18, r16
 378:	36 95       	lsr	r19
 37a:	27 95       	ror	r18
 37c:	36 95       	lsr	r19
 37e:	27 95       	ror	r18
 380:	36 95       	lsr	r19
 382:	27 95       	ror	r18
 384:	a5 ec       	ldi	r26, 0xC5	; 197
 386:	b0 e2       	ldi	r27, 0x20	; 32
 388:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__umulhisi3>
 38c:	ac 01       	movw	r20, r24
 38e:	52 95       	swap	r21
 390:	42 95       	swap	r20
 392:	4f 70       	andi	r20, 0x0F	; 15
 394:	45 27       	eor	r20, r21
 396:	5f 70       	andi	r21, 0x0F	; 15
 398:	45 27       	eor	r20, r21
 39a:	50 93 08 02 	sts	0x0208, r21
 39e:	40 93 07 02 	sts	0x0207, r20
		thousand = temp%10 + 48;
 3a2:	9a 01       	movw	r18, r20
 3a4:	ad ec       	ldi	r26, 0xCD	; 205
 3a6:	bc ec       	ldi	r27, 0xCC	; 204
 3a8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__umulhisi3>
 3ac:	96 95       	lsr	r25
 3ae:	87 95       	ror	r24
 3b0:	96 95       	lsr	r25
 3b2:	87 95       	ror	r24
 3b4:	96 95       	lsr	r25
 3b6:	87 95       	ror	r24
 3b8:	9c 01       	movw	r18, r24
 3ba:	22 0f       	add	r18, r18
 3bc:	33 1f       	adc	r19, r19
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	82 0f       	add	r24, r18
 3cc:	93 1f       	adc	r25, r19
 3ce:	48 1b       	sub	r20, r24
 3d0:	59 0b       	sbc	r21, r25
 3d2:	ca 01       	movw	r24, r20
 3d4:	c0 96       	adiw	r24, 0x30	; 48
 3d6:	90 93 17 02 	sts	0x0217, r25
 3da:	80 93 16 02 	sts	0x0216, r24
		lcd_wr_char(thousand);
 3de:	0e 94 48 01 	call	0x290	; 0x290 <lcd_wr_char>
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <lcd_print+0xcc>
		flag=1;
	}
	if(digits==3 || flag==1)
 3e4:	c3 30       	cpi	r28, 0x03	; 3
 3e6:	d1 05       	cpc	r29, r1
 3e8:	09 f0       	breq	.+2      	; 0x3ec <lcd_print+0xcc>
 3ea:	8d c0       	rjmp	.+282    	; 0x506 <lcd_print+0x1e6>
	{
		temp = value/100;
 3ec:	98 01       	movw	r18, r16
 3ee:	36 95       	lsr	r19
 3f0:	27 95       	ror	r18
 3f2:	36 95       	lsr	r19
 3f4:	27 95       	ror	r18
 3f6:	ab e7       	ldi	r26, 0x7B	; 123
 3f8:	b4 e1       	ldi	r27, 0x14	; 20
 3fa:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__umulhisi3>
 3fe:	ac 01       	movw	r20, r24
 400:	56 95       	lsr	r21
 402:	47 95       	ror	r20
 404:	50 93 08 02 	sts	0x0208, r21
 408:	40 93 07 02 	sts	0x0207, r20
		hundred = temp%10 + 48;
 40c:	9a 01       	movw	r18, r20
 40e:	ad ec       	ldi	r26, 0xCD	; 205
 410:	bc ec       	ldi	r27, 0xCC	; 204
 412:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__umulhisi3>
 416:	96 95       	lsr	r25
 418:	87 95       	ror	r24
 41a:	96 95       	lsr	r25
 41c:	87 95       	ror	r24
 41e:	96 95       	lsr	r25
 420:	87 95       	ror	r24
 422:	9c 01       	movw	r18, r24
 424:	22 0f       	add	r18, r18
 426:	33 1f       	adc	r19, r19
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	82 0f       	add	r24, r18
 436:	93 1f       	adc	r25, r19
 438:	48 1b       	sub	r20, r24
 43a:	59 0b       	sbc	r21, r25
 43c:	ca 01       	movw	r24, r20
 43e:	c0 96       	adiw	r24, 0x30	; 48
 440:	90 93 12 02 	sts	0x0212, r25
 444:	80 93 11 02 	sts	0x0211, r24
		lcd_wr_char(hundred);
 448:	0e 94 48 01 	call	0x290	; 0x290 <lcd_wr_char>
		flag=1;
	}
	if(digits==2 || flag==1)
	{
		temp = value/10;
 44c:	98 01       	movw	r18, r16
 44e:	ad ec       	ldi	r26, 0xCD	; 205
 450:	bc ec       	ldi	r27, 0xCC	; 204
 452:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__umulhisi3>
 456:	ac 01       	movw	r20, r24
 458:	56 95       	lsr	r21
 45a:	47 95       	ror	r20
 45c:	56 95       	lsr	r21
 45e:	47 95       	ror	r20
 460:	56 95       	lsr	r21
 462:	47 95       	ror	r20
 464:	50 93 08 02 	sts	0x0208, r21
 468:	40 93 07 02 	sts	0x0207, r20
		tens = temp%10 + 48;
 46c:	9a 01       	movw	r18, r20
 46e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__umulhisi3>
 472:	96 95       	lsr	r25
 474:	87 95       	ror	r24
 476:	96 95       	lsr	r25
 478:	87 95       	ror	r24
 47a:	96 95       	lsr	r25
 47c:	87 95       	ror	r24
 47e:	9c 01       	movw	r18, r24
 480:	22 0f       	add	r18, r18
 482:	33 1f       	adc	r19, r19
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	82 0f       	add	r24, r18
 492:	93 1f       	adc	r25, r19
 494:	48 1b       	sub	r20, r24
 496:	59 0b       	sbc	r21, r25
 498:	ca 01       	movw	r24, r20
 49a:	c0 96       	adiw	r24, 0x30	; 48
 49c:	90 93 10 02 	sts	0x0210, r25
 4a0:	80 93 0f 02 	sts	0x020F, r24
		lcd_wr_char(tens);
 4a4:	0e 94 48 01 	call	0x290	; 0x290 <lcd_wr_char>
 4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <lcd_print+0x190>
		flag=1;
	}
	if(digits==1 || flag==1)
 4aa:	c1 30       	cpi	r28, 0x01	; 1
 4ac:	d1 05       	cpc	r29, r1
 4ae:	01 f5       	brne	.+64     	; 0x4f0 <lcd_print+0x1d0>
	{
		unit = value%10 + 48;
 4b0:	98 01       	movw	r18, r16
 4b2:	ad ec       	ldi	r26, 0xCD	; 205
 4b4:	bc ec       	ldi	r27, 0xCC	; 204
 4b6:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__umulhisi3>
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	96 95       	lsr	r25
 4c0:	87 95       	ror	r24
 4c2:	96 95       	lsr	r25
 4c4:	87 95       	ror	r24
 4c6:	9c 01       	movw	r18, r24
 4c8:	22 0f       	add	r18, r18
 4ca:	33 1f       	adc	r19, r19
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	82 0f       	add	r24, r18
 4da:	93 1f       	adc	r25, r19
 4dc:	08 1b       	sub	r16, r24
 4de:	19 0b       	sbc	r17, r25
 4e0:	c8 01       	movw	r24, r16
 4e2:	c0 96       	adiw	r24, 0x30	; 48
 4e4:	90 93 15 02 	sts	0x0215, r25
 4e8:	80 93 14 02 	sts	0x0214, r24
		lcd_wr_char(unit);
 4ec:	0e 94 48 01 	call	0x290	; 0x290 <lcd_wr_char>
	}
	if(digits>5)
 4f0:	26 97       	sbiw	r28, 0x06	; 6
 4f2:	6c f0       	brlt	.+26     	; 0x50e <lcd_print+0x1ee>
	{
		lcd_wr_char('E');
 4f4:	85 e4       	ldi	r24, 0x45	; 69
 4f6:	0e 94 48 01 	call	0x290	; 0x290 <lcd_wr_char>
 4fa:	09 c0       	rjmp	.+18     	; 0x50e <lcd_print+0x1ee>
	{
		million=value/10000+48;
		lcd_wr_char(million);
		flag=1;
	}
	if(digits==4 || flag==1)
 4fc:	c4 30       	cpi	r28, 0x04	; 4
 4fe:	d1 05       	cpc	r29, r1
 500:	09 f0       	breq	.+2      	; 0x504 <lcd_print+0x1e4>
 502:	70 cf       	rjmp	.-288    	; 0x3e4 <lcd_print+0xc4>
 504:	38 cf       	rjmp	.-400    	; 0x376 <lcd_print+0x56>
		temp = value/100;
		hundred = temp%10 + 48;
		lcd_wr_char(hundred);
		flag=1;
	}
	if(digits==2 || flag==1)
 506:	c2 30       	cpi	r28, 0x02	; 2
 508:	d1 05       	cpc	r29, r1
 50a:	79 f6       	brne	.-98     	; 0x4aa <lcd_print+0x18a>
 50c:	9f cf       	rjmp	.-194    	; 0x44c <lcd_print+0x12c>
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	1f 91       	pop	r17
 514:	0f 91       	pop	r16
 516:	08 95       	ret

00000518 <lcd_port_config>:
float BATT_Voltage, BATT_V;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 518:	87 b1       	in	r24, 0x07	; 7
 51a:	87 6f       	ori	r24, 0xF7	; 247
 51c:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 51e:	88 b1       	in	r24, 0x08	; 8
 520:	80 78       	andi	r24, 0x80	; 128
 522:	88 b9       	out	0x08, r24	; 8
 524:	08 95       	ret

00000526 <adc_pin_config>:
}

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; //set PORTF direction as input
 526:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00; //set PORTF pins floating
 528:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00; //set PORTK direction as input
 52a:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00; //set PORTK pins floating
 52e:	10 92 08 01 	sts	0x0108, r1
 532:	08 95       	ret

00000534 <port_init>:
}

//Function to Initialize PORTS
void port_init()
{
	lcd_port_config();
 534:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_port_config>
	adc_pin_config();	
 538:	0e 94 93 02 	call	0x526	; 0x526 <adc_pin_config>
 53c:	08 95       	ret

0000053e <adc_init>:
}

//Function to Initialize ADC
void adc_init()
{
	ADCSRA = 0x00;
 53e:	ea e7       	ldi	r30, 0x7A	; 122
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 544:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 548:	80 e2       	ldi	r24, 0x20	; 32
 54a:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
 54e:	80 e8       	ldi	r24, 0x80	; 128
 550:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 552:	86 e8       	ldi	r24, 0x86	; 134
 554:	80 83       	st	Z, r24
 556:	08 95       	ret

00000558 <ADC_Conversion>:

//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
 558:	88 30       	cpi	r24, 0x08	; 8
 55a:	18 f0       	brcs	.+6      	; 0x562 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
 55c:	98 e0       	ldi	r25, 0x08	; 8
 55e:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
 562:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
 564:	80 62       	ori	r24, 0x20	; 32
 566:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 56a:	ea e7       	ldi	r30, 0x7A	; 122
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	80 81       	ld	r24, Z
 570:	80 64       	ori	r24, 0x40	; 64
 572:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
 574:	80 81       	ld	r24, Z
 576:	84 ff       	sbrs	r24, 4
 578:	fd cf       	rjmp	.-6      	; 0x574 <ADC_Conversion+0x1c>
	a=ADCH;
 57a:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 57e:	ea e7       	ldi	r30, 0x7A	; 122
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	90 81       	ld	r25, Z
 584:	90 61       	ori	r25, 0x10	; 16
 586:	90 83       	st	Z, r25
	ADCSRB = 0x00;
 588:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 58c:	08 95       	ret

0000058e <Sharp_GP2D12_estimation>:
// analog value of Sharp Sensor. 
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
 58e:	68 2f       	mov	r22, r24
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 83 04 	call	0x906	; 0x906 <__floatunsisf>
 59a:	2f ee       	ldi	r18, 0xEF	; 239
 59c:	39 ec       	ldi	r19, 0xC9	; 201
 59e:	43 e9       	ldi	r20, 0x93	; 147
 5a0:	5f e3       	ldi	r21, 0x3F	; 63
 5a2:	0e 94 74 05 	call	0xae8	; 0xae8 <pow>
 5a6:	26 2f       	mov	r18, r22
 5a8:	37 2f       	mov	r19, r23
 5aa:	48 2f       	mov	r20, r24
 5ac:	59 2f       	mov	r21, r25
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	80 e8       	ldi	r24, 0x80	; 128
 5b4:	9f e3       	ldi	r25, 0x3F	; 63
 5b6:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__divsf3>
 5ba:	2a e9       	ldi	r18, 0x9A	; 154
 5bc:	39 ef       	ldi	r19, 0xF9	; 249
 5be:	4e e2       	ldi	r20, 0x2E	; 46
 5c0:	55 e4       	ldi	r21, 0x45	; 69
 5c2:	0e 94 11 05 	call	0xa22	; 0xa22 <__mulsf3>
 5c6:	20 e0       	ldi	r18, 0x00	; 0
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	40 e2       	ldi	r20, 0x20	; 32
 5cc:	51 e4       	ldi	r21, 0x41	; 65
 5ce:	0e 94 11 05 	call	0xa22	; 0xa22 <__mulsf3>
 5d2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__fixsfsi>
 5d6:	88 27       	eor	r24, r24
 5d8:	77 fd       	sbrc	r23, 7
 5da:	80 95       	com	r24
 5dc:	98 2f       	mov	r25, r24
 5de:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
	distanceInt = (int)distance;
 5e2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
 5e6:	26 2f       	mov	r18, r22
 5e8:	37 2f       	mov	r19, r23
 5ea:	21 32       	cpi	r18, 0x21	; 33
 5ec:	83 e0       	ldi	r24, 0x03	; 3
 5ee:	38 07       	cpc	r19, r24
 5f0:	10 f0       	brcs	.+4      	; 0x5f6 <Sharp_GP2D12_estimation+0x68>
 5f2:	20 e2       	ldi	r18, 0x20	; 32
 5f4:	33 e0       	ldi	r19, 0x03	; 3
}
 5f6:	82 2f       	mov	r24, r18
 5f8:	93 2f       	mov	r25, r19
 5fa:	08 95       	ret

000005fc <init_devices>:

void init_devices (void)
{
 cli(); //Clears the global interrupts
 5fc:	f8 94       	cli
 port_init();
 5fe:	0e 94 9a 02 	call	0x534	; 0x534 <port_init>
 adc_init();
 602:	0e 94 9f 02 	call	0x53e	; 0x53e <adc_init>
 sei(); //Enables the global interrupts
 606:	78 94       	sei
 608:	08 95       	ret

0000060a <main>:

//Main Function
int main(void)
{
	unsigned int value;
	init_devices();
 60a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <init_devices>
	
	lcd_set_4bit();
 60e:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_set_4bit>
	lcd_init();
 612:	0e 94 31 01 	call	0x262	; 0x262 <lcd_init>
	
	while(1)
	{
		BATT_V = ADC_Conversion(0);
		BATT_Voltage = ((ADC_Conversion(0)*100)*0.07902) + 0.7;	//Prints Battery Voltage Status
 616:	c4 e6       	ldi	r28, 0x64	; 100
	lcd_set_4bit();
	lcd_init();
	
	while(1)
	{
		BATT_V = ADC_Conversion(0);
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	0e 94 ac 02 	call	0x558	; 0x558 <ADC_Conversion>
 61e:	68 2f       	mov	r22, r24
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	0e 94 83 04 	call	0x906	; 0x906 <__floatunsisf>
 62a:	60 93 03 02 	sts	0x0203, r22
 62e:	70 93 04 02 	sts	0x0204, r23
 632:	80 93 05 02 	sts	0x0205, r24
 636:	90 93 06 02 	sts	0x0206, r25
		BATT_Voltage = ((ADC_Conversion(0)*100)*0.07902) + 0.7;	//Prints Battery Voltage Status
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	0e 94 ac 02 	call	0x558	; 0x558 <ADC_Conversion>
 640:	c8 9f       	mul	r28, r24
 642:	c0 01       	movw	r24, r0
 644:	11 24       	eor	r1, r1
 646:	bc 01       	movw	r22, r24
 648:	88 27       	eor	r24, r24
 64a:	77 fd       	sbrc	r23, 7
 64c:	80 95       	com	r24
 64e:	98 2f       	mov	r25, r24
 650:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
 654:	2d e3       	ldi	r18, 0x3D	; 61
 656:	35 ed       	ldi	r19, 0xD5	; 213
 658:	41 ea       	ldi	r20, 0xA1	; 161
 65a:	5d e3       	ldi	r21, 0x3D	; 61
 65c:	0e 94 11 05 	call	0xa22	; 0xa22 <__mulsf3>
 660:	23 e3       	ldi	r18, 0x33	; 51
 662:	33 e3       	ldi	r19, 0x33	; 51
 664:	43 e3       	ldi	r20, 0x33	; 51
 666:	5f e3       	ldi	r21, 0x3F	; 63
 668:	0e 94 86 03 	call	0x70c	; 0x70c <__addsf3>
 66c:	60 93 0b 02 	sts	0x020B, r22
 670:	70 93 0c 02 	sts	0x020C, r23
 674:	80 93 0d 02 	sts	0x020D, r24
 678:	90 93 0e 02 	sts	0x020E, r25
		print_sensor(2,6,2);							//Prints Value of White Line Sensor2
		print_sensor(2,10,1);							//Prints Value of White Line Sensor3

		//print_sensor(2,9,11); 						//Analog Value Of Front Sharp Sensor
*/
		sharp = ADC_Conversion(9);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
 67c:	89 e0       	ldi	r24, 0x09	; 9
 67e:	0e 94 ac 02 	call	0x558	; 0x558 <ADC_Conversion>
 682:	80 93 13 02 	sts	0x0213, r24
		value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
 686:	0e 94 c7 02 	call	0x58e	; 0x58e <Sharp_GP2D12_estimation>
		lcd_print(1,1,value,3); 						//Prints Value Of Distanc in MM measured by Sharp Sensor.
 68a:	23 e0       	ldi	r18, 0x03	; 3
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	ac 01       	movw	r20, r24
 690:	61 e0       	ldi	r22, 0x01	; 1
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	0e 94 90 01 	call	0x320	; 0x320 <lcd_print>
		sharp = ADC_Conversion(10);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
 698:	8a e0       	ldi	r24, 0x0A	; 10
 69a:	0e 94 ac 02 	call	0x558	; 0x558 <ADC_Conversion>
 69e:	80 93 13 02 	sts	0x0213, r24
		value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
 6a2:	0e 94 c7 02 	call	0x58e	; 0x58e <Sharp_GP2D12_estimation>
		lcd_print(1,6,value,3); 						//Prints Value Of Distanc in MM measured by Sharp Sensor.
 6a6:	23 e0       	ldi	r18, 0x03	; 3
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	ac 01       	movw	r20, r24
 6ac:	66 e0       	ldi	r22, 0x06	; 6
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	0e 94 90 01 	call	0x320	; 0x320 <lcd_print>
			sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
 6b4:	8b e0       	ldi	r24, 0x0B	; 11
 6b6:	0e 94 ac 02 	call	0x558	; 0x558 <ADC_Conversion>
 6ba:	80 93 13 02 	sts	0x0213, r24
			value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
 6be:	0e 94 c7 02 	call	0x58e	; 0x58e <Sharp_GP2D12_estimation>
			lcd_print(1,14,value,3); 						//Prints Value Of Distanc in MM measured by Sharp Sensor.
 6c2:	23 e0       	ldi	r18, 0x03	; 3
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	ac 01       	movw	r20, r24
 6c8:	6e e0       	ldi	r22, 0x0E	; 14
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	0e 94 90 01 	call	0x320	; 0x320 <lcd_print>
				sharp = ADC_Conversion(12);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
 6d0:	8c e0       	ldi	r24, 0x0C	; 12
 6d2:	0e 94 ac 02 	call	0x558	; 0x558 <ADC_Conversion>
 6d6:	80 93 13 02 	sts	0x0213, r24
				value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
 6da:	0e 94 c7 02 	call	0x58e	; 0x58e <Sharp_GP2D12_estimation>
				lcd_print(2,14,value,3); 						//Prints Value Of Distanc in MM measured by Sharp Sensor.
 6de:	23 e0       	ldi	r18, 0x03	; 3
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	ac 01       	movw	r20, r24
 6e4:	6e e0       	ldi	r22, 0x0E	; 14
 6e6:	82 e0       	ldi	r24, 0x02	; 2
 6e8:	0e 94 90 01 	call	0x320	; 0x320 <lcd_print>
					sharp = ADC_Conversion(13);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
 6ec:	8d e0       	ldi	r24, 0x0D	; 13
 6ee:	0e 94 ac 02 	call	0x558	; 0x558 <ADC_Conversion>
 6f2:	80 93 13 02 	sts	0x0213, r24
					value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
 6f6:	0e 94 c7 02 	call	0x58e	; 0x58e <Sharp_GP2D12_estimation>
					lcd_print(2,3,value,3); 						//Prints Value Of Distanc in MM measured by Sharp Sensor.
 6fa:	23 e0       	ldi	r18, 0x03	; 3
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	ac 01       	movw	r20, r24
 700:	63 e0       	ldi	r22, 0x03	; 3
 702:	82 e0       	ldi	r24, 0x02	; 2
 704:	0e 94 90 01 	call	0x320	; 0x320 <lcd_print>
 708:	87 cf       	rjmp	.-242    	; 0x618 <main+0xe>

0000070a <__subsf3>:
 70a:	50 58       	subi	r21, 0x80	; 128

0000070c <__addsf3>:
 70c:	bb 27       	eor	r27, r27
 70e:	aa 27       	eor	r26, r26
 710:	0e d0       	rcall	.+28     	; 0x72e <__addsf3x>
 712:	4d c1       	rjmp	.+666    	; 0x9ae <__fp_round>
 714:	3e d1       	rcall	.+636    	; 0x992 <__fp_pscA>
 716:	30 f0       	brcs	.+12     	; 0x724 <__addsf3+0x18>
 718:	43 d1       	rcall	.+646    	; 0x9a0 <__fp_pscB>
 71a:	20 f0       	brcs	.+8      	; 0x724 <__addsf3+0x18>
 71c:	31 f4       	brne	.+12     	; 0x72a <__addsf3+0x1e>
 71e:	9f 3f       	cpi	r25, 0xFF	; 255
 720:	11 f4       	brne	.+4      	; 0x726 <__addsf3+0x1a>
 722:	1e f4       	brtc	.+6      	; 0x72a <__addsf3+0x1e>
 724:	33 c1       	rjmp	.+614    	; 0x98c <__fp_nan>
 726:	0e f4       	brtc	.+2      	; 0x72a <__addsf3+0x1e>
 728:	e0 95       	com	r30
 72a:	e7 fb       	bst	r30, 7
 72c:	29 c1       	rjmp	.+594    	; 0x980 <__fp_inf>

0000072e <__addsf3x>:
 72e:	e9 2f       	mov	r30, r25
 730:	4f d1       	rcall	.+670    	; 0x9d0 <__fp_split3>
 732:	80 f3       	brcs	.-32     	; 0x714 <__addsf3+0x8>
 734:	ba 17       	cp	r27, r26
 736:	62 07       	cpc	r22, r18
 738:	73 07       	cpc	r23, r19
 73a:	84 07       	cpc	r24, r20
 73c:	95 07       	cpc	r25, r21
 73e:	18 f0       	brcs	.+6      	; 0x746 <__addsf3x+0x18>
 740:	71 f4       	brne	.+28     	; 0x75e <__addsf3x+0x30>
 742:	9e f5       	brtc	.+102    	; 0x7aa <__addsf3x+0x7c>
 744:	67 c1       	rjmp	.+718    	; 0xa14 <__fp_zero>
 746:	0e f4       	brtc	.+2      	; 0x74a <__addsf3x+0x1c>
 748:	e0 95       	com	r30
 74a:	0b 2e       	mov	r0, r27
 74c:	ba 2f       	mov	r27, r26
 74e:	a0 2d       	mov	r26, r0
 750:	0b 01       	movw	r0, r22
 752:	b9 01       	movw	r22, r18
 754:	90 01       	movw	r18, r0
 756:	0c 01       	movw	r0, r24
 758:	ca 01       	movw	r24, r20
 75a:	a0 01       	movw	r20, r0
 75c:	11 24       	eor	r1, r1
 75e:	ff 27       	eor	r31, r31
 760:	59 1b       	sub	r21, r25
 762:	99 f0       	breq	.+38     	; 0x78a <__addsf3x+0x5c>
 764:	59 3f       	cpi	r21, 0xF9	; 249
 766:	50 f4       	brcc	.+20     	; 0x77c <__addsf3x+0x4e>
 768:	50 3e       	cpi	r21, 0xE0	; 224
 76a:	68 f1       	brcs	.+90     	; 0x7c6 <__addsf3x+0x98>
 76c:	1a 16       	cp	r1, r26
 76e:	f0 40       	sbci	r31, 0x00	; 0
 770:	a2 2f       	mov	r26, r18
 772:	23 2f       	mov	r18, r19
 774:	34 2f       	mov	r19, r20
 776:	44 27       	eor	r20, r20
 778:	58 5f       	subi	r21, 0xF8	; 248
 77a:	f3 cf       	rjmp	.-26     	; 0x762 <__addsf3x+0x34>
 77c:	46 95       	lsr	r20
 77e:	37 95       	ror	r19
 780:	27 95       	ror	r18
 782:	a7 95       	ror	r26
 784:	f0 40       	sbci	r31, 0x00	; 0
 786:	53 95       	inc	r21
 788:	c9 f7       	brne	.-14     	; 0x77c <__addsf3x+0x4e>
 78a:	7e f4       	brtc	.+30     	; 0x7aa <__addsf3x+0x7c>
 78c:	1f 16       	cp	r1, r31
 78e:	ba 0b       	sbc	r27, r26
 790:	62 0b       	sbc	r22, r18
 792:	73 0b       	sbc	r23, r19
 794:	84 0b       	sbc	r24, r20
 796:	ba f0       	brmi	.+46     	; 0x7c6 <__addsf3x+0x98>
 798:	91 50       	subi	r25, 0x01	; 1
 79a:	a1 f0       	breq	.+40     	; 0x7c4 <__addsf3x+0x96>
 79c:	ff 0f       	add	r31, r31
 79e:	bb 1f       	adc	r27, r27
 7a0:	66 1f       	adc	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	c2 f7       	brpl	.-16     	; 0x798 <__addsf3x+0x6a>
 7a8:	0e c0       	rjmp	.+28     	; 0x7c6 <__addsf3x+0x98>
 7aa:	ba 0f       	add	r27, r26
 7ac:	62 1f       	adc	r22, r18
 7ae:	73 1f       	adc	r23, r19
 7b0:	84 1f       	adc	r24, r20
 7b2:	48 f4       	brcc	.+18     	; 0x7c6 <__addsf3x+0x98>
 7b4:	87 95       	ror	r24
 7b6:	77 95       	ror	r23
 7b8:	67 95       	ror	r22
 7ba:	b7 95       	ror	r27
 7bc:	f7 95       	ror	r31
 7be:	9e 3f       	cpi	r25, 0xFE	; 254
 7c0:	08 f0       	brcs	.+2      	; 0x7c4 <__addsf3x+0x96>
 7c2:	b3 cf       	rjmp	.-154    	; 0x72a <__addsf3+0x1e>
 7c4:	93 95       	inc	r25
 7c6:	88 0f       	add	r24, r24
 7c8:	08 f0       	brcs	.+2      	; 0x7cc <__addsf3x+0x9e>
 7ca:	99 27       	eor	r25, r25
 7cc:	ee 0f       	add	r30, r30
 7ce:	97 95       	ror	r25
 7d0:	87 95       	ror	r24
 7d2:	08 95       	ret

000007d4 <__divsf3>:
 7d4:	0c d0       	rcall	.+24     	; 0x7ee <__divsf3x>
 7d6:	eb c0       	rjmp	.+470    	; 0x9ae <__fp_round>
 7d8:	e3 d0       	rcall	.+454    	; 0x9a0 <__fp_pscB>
 7da:	40 f0       	brcs	.+16     	; 0x7ec <__divsf3+0x18>
 7dc:	da d0       	rcall	.+436    	; 0x992 <__fp_pscA>
 7de:	30 f0       	brcs	.+12     	; 0x7ec <__divsf3+0x18>
 7e0:	21 f4       	brne	.+8      	; 0x7ea <__divsf3+0x16>
 7e2:	5f 3f       	cpi	r21, 0xFF	; 255
 7e4:	19 f0       	breq	.+6      	; 0x7ec <__divsf3+0x18>
 7e6:	cc c0       	rjmp	.+408    	; 0x980 <__fp_inf>
 7e8:	51 11       	cpse	r21, r1
 7ea:	15 c1       	rjmp	.+554    	; 0xa16 <__fp_szero>
 7ec:	cf c0       	rjmp	.+414    	; 0x98c <__fp_nan>

000007ee <__divsf3x>:
 7ee:	f0 d0       	rcall	.+480    	; 0x9d0 <__fp_split3>
 7f0:	98 f3       	brcs	.-26     	; 0x7d8 <__divsf3+0x4>

000007f2 <__divsf3_pse>:
 7f2:	99 23       	and	r25, r25
 7f4:	c9 f3       	breq	.-14     	; 0x7e8 <__divsf3+0x14>
 7f6:	55 23       	and	r21, r21
 7f8:	b1 f3       	breq	.-20     	; 0x7e6 <__divsf3+0x12>
 7fa:	95 1b       	sub	r25, r21
 7fc:	55 0b       	sbc	r21, r21
 7fe:	bb 27       	eor	r27, r27
 800:	aa 27       	eor	r26, r26
 802:	62 17       	cp	r22, r18
 804:	73 07       	cpc	r23, r19
 806:	84 07       	cpc	r24, r20
 808:	38 f0       	brcs	.+14     	; 0x818 <__divsf3_pse+0x26>
 80a:	9f 5f       	subi	r25, 0xFF	; 255
 80c:	5f 4f       	sbci	r21, 0xFF	; 255
 80e:	22 0f       	add	r18, r18
 810:	33 1f       	adc	r19, r19
 812:	44 1f       	adc	r20, r20
 814:	aa 1f       	adc	r26, r26
 816:	a9 f3       	breq	.-22     	; 0x802 <__divsf3_pse+0x10>
 818:	33 d0       	rcall	.+102    	; 0x880 <__divsf3_pse+0x8e>
 81a:	0e 2e       	mov	r0, r30
 81c:	3a f0       	brmi	.+14     	; 0x82c <__divsf3_pse+0x3a>
 81e:	e0 e8       	ldi	r30, 0x80	; 128
 820:	30 d0       	rcall	.+96     	; 0x882 <__divsf3_pse+0x90>
 822:	91 50       	subi	r25, 0x01	; 1
 824:	50 40       	sbci	r21, 0x00	; 0
 826:	e6 95       	lsr	r30
 828:	00 1c       	adc	r0, r0
 82a:	ca f7       	brpl	.-14     	; 0x81e <__divsf3_pse+0x2c>
 82c:	29 d0       	rcall	.+82     	; 0x880 <__divsf3_pse+0x8e>
 82e:	fe 2f       	mov	r31, r30
 830:	27 d0       	rcall	.+78     	; 0x880 <__divsf3_pse+0x8e>
 832:	66 0f       	add	r22, r22
 834:	77 1f       	adc	r23, r23
 836:	88 1f       	adc	r24, r24
 838:	bb 1f       	adc	r27, r27
 83a:	26 17       	cp	r18, r22
 83c:	37 07       	cpc	r19, r23
 83e:	48 07       	cpc	r20, r24
 840:	ab 07       	cpc	r26, r27
 842:	b0 e8       	ldi	r27, 0x80	; 128
 844:	09 f0       	breq	.+2      	; 0x848 <__divsf3_pse+0x56>
 846:	bb 0b       	sbc	r27, r27
 848:	80 2d       	mov	r24, r0
 84a:	bf 01       	movw	r22, r30
 84c:	ff 27       	eor	r31, r31
 84e:	93 58       	subi	r25, 0x83	; 131
 850:	5f 4f       	sbci	r21, 0xFF	; 255
 852:	2a f0       	brmi	.+10     	; 0x85e <__divsf3_pse+0x6c>
 854:	9e 3f       	cpi	r25, 0xFE	; 254
 856:	51 05       	cpc	r21, r1
 858:	68 f0       	brcs	.+26     	; 0x874 <__divsf3_pse+0x82>
 85a:	92 c0       	rjmp	.+292    	; 0x980 <__fp_inf>
 85c:	dc c0       	rjmp	.+440    	; 0xa16 <__fp_szero>
 85e:	5f 3f       	cpi	r21, 0xFF	; 255
 860:	ec f3       	brlt	.-6      	; 0x85c <__divsf3_pse+0x6a>
 862:	98 3e       	cpi	r25, 0xE8	; 232
 864:	dc f3       	brlt	.-10     	; 0x85c <__divsf3_pse+0x6a>
 866:	86 95       	lsr	r24
 868:	77 95       	ror	r23
 86a:	67 95       	ror	r22
 86c:	b7 95       	ror	r27
 86e:	f7 95       	ror	r31
 870:	9f 5f       	subi	r25, 0xFF	; 255
 872:	c9 f7       	brne	.-14     	; 0x866 <__divsf3_pse+0x74>
 874:	88 0f       	add	r24, r24
 876:	91 1d       	adc	r25, r1
 878:	96 95       	lsr	r25
 87a:	87 95       	ror	r24
 87c:	97 f9       	bld	r25, 7
 87e:	08 95       	ret
 880:	e1 e0       	ldi	r30, 0x01	; 1
 882:	66 0f       	add	r22, r22
 884:	77 1f       	adc	r23, r23
 886:	88 1f       	adc	r24, r24
 888:	bb 1f       	adc	r27, r27
 88a:	62 17       	cp	r22, r18
 88c:	73 07       	cpc	r23, r19
 88e:	84 07       	cpc	r24, r20
 890:	ba 07       	cpc	r27, r26
 892:	20 f0       	brcs	.+8      	; 0x89c <__divsf3_pse+0xaa>
 894:	62 1b       	sub	r22, r18
 896:	73 0b       	sbc	r23, r19
 898:	84 0b       	sbc	r24, r20
 89a:	ba 0b       	sbc	r27, r26
 89c:	ee 1f       	adc	r30, r30
 89e:	88 f7       	brcc	.-30     	; 0x882 <__divsf3_pse+0x90>
 8a0:	e0 95       	com	r30
 8a2:	08 95       	ret

000008a4 <__fixsfsi>:
 8a4:	04 d0       	rcall	.+8      	; 0x8ae <__fixunssfsi>
 8a6:	68 94       	set
 8a8:	b1 11       	cpse	r27, r1
 8aa:	b5 c0       	rjmp	.+362    	; 0xa16 <__fp_szero>
 8ac:	08 95       	ret

000008ae <__fixunssfsi>:
 8ae:	98 d0       	rcall	.+304    	; 0x9e0 <__fp_splitA>
 8b0:	88 f0       	brcs	.+34     	; 0x8d4 <__fixunssfsi+0x26>
 8b2:	9f 57       	subi	r25, 0x7F	; 127
 8b4:	90 f0       	brcs	.+36     	; 0x8da <__fixunssfsi+0x2c>
 8b6:	b9 2f       	mov	r27, r25
 8b8:	99 27       	eor	r25, r25
 8ba:	b7 51       	subi	r27, 0x17	; 23
 8bc:	a0 f0       	brcs	.+40     	; 0x8e6 <__fixunssfsi+0x38>
 8be:	d1 f0       	breq	.+52     	; 0x8f4 <__fixunssfsi+0x46>
 8c0:	66 0f       	add	r22, r22
 8c2:	77 1f       	adc	r23, r23
 8c4:	88 1f       	adc	r24, r24
 8c6:	99 1f       	adc	r25, r25
 8c8:	1a f0       	brmi	.+6      	; 0x8d0 <__fixunssfsi+0x22>
 8ca:	ba 95       	dec	r27
 8cc:	c9 f7       	brne	.-14     	; 0x8c0 <__fixunssfsi+0x12>
 8ce:	12 c0       	rjmp	.+36     	; 0x8f4 <__fixunssfsi+0x46>
 8d0:	b1 30       	cpi	r27, 0x01	; 1
 8d2:	81 f0       	breq	.+32     	; 0x8f4 <__fixunssfsi+0x46>
 8d4:	9f d0       	rcall	.+318    	; 0xa14 <__fp_zero>
 8d6:	b1 e0       	ldi	r27, 0x01	; 1
 8d8:	08 95       	ret
 8da:	9c c0       	rjmp	.+312    	; 0xa14 <__fp_zero>
 8dc:	67 2f       	mov	r22, r23
 8de:	78 2f       	mov	r23, r24
 8e0:	88 27       	eor	r24, r24
 8e2:	b8 5f       	subi	r27, 0xF8	; 248
 8e4:	39 f0       	breq	.+14     	; 0x8f4 <__fixunssfsi+0x46>
 8e6:	b9 3f       	cpi	r27, 0xF9	; 249
 8e8:	cc f3       	brlt	.-14     	; 0x8dc <__fixunssfsi+0x2e>
 8ea:	86 95       	lsr	r24
 8ec:	77 95       	ror	r23
 8ee:	67 95       	ror	r22
 8f0:	b3 95       	inc	r27
 8f2:	d9 f7       	brne	.-10     	; 0x8ea <__fixunssfsi+0x3c>
 8f4:	3e f4       	brtc	.+14     	; 0x904 <__fixunssfsi+0x56>
 8f6:	90 95       	com	r25
 8f8:	80 95       	com	r24
 8fa:	70 95       	com	r23
 8fc:	61 95       	neg	r22
 8fe:	7f 4f       	sbci	r23, 0xFF	; 255
 900:	8f 4f       	sbci	r24, 0xFF	; 255
 902:	9f 4f       	sbci	r25, 0xFF	; 255
 904:	08 95       	ret

00000906 <__floatunsisf>:
 906:	e8 94       	clt
 908:	09 c0       	rjmp	.+18     	; 0x91c <__floatsisf+0x12>

0000090a <__floatsisf>:
 90a:	97 fb       	bst	r25, 7
 90c:	3e f4       	brtc	.+14     	; 0x91c <__floatsisf+0x12>
 90e:	90 95       	com	r25
 910:	80 95       	com	r24
 912:	70 95       	com	r23
 914:	61 95       	neg	r22
 916:	7f 4f       	sbci	r23, 0xFF	; 255
 918:	8f 4f       	sbci	r24, 0xFF	; 255
 91a:	9f 4f       	sbci	r25, 0xFF	; 255
 91c:	99 23       	and	r25, r25
 91e:	a9 f0       	breq	.+42     	; 0x94a <__floatsisf+0x40>
 920:	f9 2f       	mov	r31, r25
 922:	96 e9       	ldi	r25, 0x96	; 150
 924:	bb 27       	eor	r27, r27
 926:	93 95       	inc	r25
 928:	f6 95       	lsr	r31
 92a:	87 95       	ror	r24
 92c:	77 95       	ror	r23
 92e:	67 95       	ror	r22
 930:	b7 95       	ror	r27
 932:	f1 11       	cpse	r31, r1
 934:	f8 cf       	rjmp	.-16     	; 0x926 <__floatsisf+0x1c>
 936:	fa f4       	brpl	.+62     	; 0x976 <__floatsisf+0x6c>
 938:	bb 0f       	add	r27, r27
 93a:	11 f4       	brne	.+4      	; 0x940 <__floatsisf+0x36>
 93c:	60 ff       	sbrs	r22, 0
 93e:	1b c0       	rjmp	.+54     	; 0x976 <__floatsisf+0x6c>
 940:	6f 5f       	subi	r22, 0xFF	; 255
 942:	7f 4f       	sbci	r23, 0xFF	; 255
 944:	8f 4f       	sbci	r24, 0xFF	; 255
 946:	9f 4f       	sbci	r25, 0xFF	; 255
 948:	16 c0       	rjmp	.+44     	; 0x976 <__floatsisf+0x6c>
 94a:	88 23       	and	r24, r24
 94c:	11 f0       	breq	.+4      	; 0x952 <__floatsisf+0x48>
 94e:	96 e9       	ldi	r25, 0x96	; 150
 950:	11 c0       	rjmp	.+34     	; 0x974 <__floatsisf+0x6a>
 952:	77 23       	and	r23, r23
 954:	21 f0       	breq	.+8      	; 0x95e <__floatsisf+0x54>
 956:	9e e8       	ldi	r25, 0x8E	; 142
 958:	87 2f       	mov	r24, r23
 95a:	76 2f       	mov	r23, r22
 95c:	05 c0       	rjmp	.+10     	; 0x968 <__floatsisf+0x5e>
 95e:	66 23       	and	r22, r22
 960:	71 f0       	breq	.+28     	; 0x97e <__floatsisf+0x74>
 962:	96 e8       	ldi	r25, 0x86	; 134
 964:	86 2f       	mov	r24, r22
 966:	70 e0       	ldi	r23, 0x00	; 0
 968:	60 e0       	ldi	r22, 0x00	; 0
 96a:	2a f0       	brmi	.+10     	; 0x976 <__floatsisf+0x6c>
 96c:	9a 95       	dec	r25
 96e:	66 0f       	add	r22, r22
 970:	77 1f       	adc	r23, r23
 972:	88 1f       	adc	r24, r24
 974:	da f7       	brpl	.-10     	; 0x96c <__floatsisf+0x62>
 976:	88 0f       	add	r24, r24
 978:	96 95       	lsr	r25
 97a:	87 95       	ror	r24
 97c:	97 f9       	bld	r25, 7
 97e:	08 95       	ret

00000980 <__fp_inf>:
 980:	97 f9       	bld	r25, 7
 982:	9f 67       	ori	r25, 0x7F	; 127
 984:	80 e8       	ldi	r24, 0x80	; 128
 986:	70 e0       	ldi	r23, 0x00	; 0
 988:	60 e0       	ldi	r22, 0x00	; 0
 98a:	08 95       	ret

0000098c <__fp_nan>:
 98c:	9f ef       	ldi	r25, 0xFF	; 255
 98e:	80 ec       	ldi	r24, 0xC0	; 192
 990:	08 95       	ret

00000992 <__fp_pscA>:
 992:	00 24       	eor	r0, r0
 994:	0a 94       	dec	r0
 996:	16 16       	cp	r1, r22
 998:	17 06       	cpc	r1, r23
 99a:	18 06       	cpc	r1, r24
 99c:	09 06       	cpc	r0, r25
 99e:	08 95       	ret

000009a0 <__fp_pscB>:
 9a0:	00 24       	eor	r0, r0
 9a2:	0a 94       	dec	r0
 9a4:	12 16       	cp	r1, r18
 9a6:	13 06       	cpc	r1, r19
 9a8:	14 06       	cpc	r1, r20
 9aa:	05 06       	cpc	r0, r21
 9ac:	08 95       	ret

000009ae <__fp_round>:
 9ae:	09 2e       	mov	r0, r25
 9b0:	03 94       	inc	r0
 9b2:	00 0c       	add	r0, r0
 9b4:	11 f4       	brne	.+4      	; 0x9ba <__fp_round+0xc>
 9b6:	88 23       	and	r24, r24
 9b8:	52 f0       	brmi	.+20     	; 0x9ce <__fp_round+0x20>
 9ba:	bb 0f       	add	r27, r27
 9bc:	40 f4       	brcc	.+16     	; 0x9ce <__fp_round+0x20>
 9be:	bf 2b       	or	r27, r31
 9c0:	11 f4       	brne	.+4      	; 0x9c6 <__fp_round+0x18>
 9c2:	60 ff       	sbrs	r22, 0
 9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fp_round+0x20>
 9c6:	6f 5f       	subi	r22, 0xFF	; 255
 9c8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ca:	8f 4f       	sbci	r24, 0xFF	; 255
 9cc:	9f 4f       	sbci	r25, 0xFF	; 255
 9ce:	08 95       	ret

000009d0 <__fp_split3>:
 9d0:	57 fd       	sbrc	r21, 7
 9d2:	90 58       	subi	r25, 0x80	; 128
 9d4:	44 0f       	add	r20, r20
 9d6:	55 1f       	adc	r21, r21
 9d8:	59 f0       	breq	.+22     	; 0x9f0 <__fp_splitA+0x10>
 9da:	5f 3f       	cpi	r21, 0xFF	; 255
 9dc:	71 f0       	breq	.+28     	; 0x9fa <__fp_splitA+0x1a>
 9de:	47 95       	ror	r20

000009e0 <__fp_splitA>:
 9e0:	88 0f       	add	r24, r24
 9e2:	97 fb       	bst	r25, 7
 9e4:	99 1f       	adc	r25, r25
 9e6:	61 f0       	breq	.+24     	; 0xa00 <__fp_splitA+0x20>
 9e8:	9f 3f       	cpi	r25, 0xFF	; 255
 9ea:	79 f0       	breq	.+30     	; 0xa0a <__fp_splitA+0x2a>
 9ec:	87 95       	ror	r24
 9ee:	08 95       	ret
 9f0:	12 16       	cp	r1, r18
 9f2:	13 06       	cpc	r1, r19
 9f4:	14 06       	cpc	r1, r20
 9f6:	55 1f       	adc	r21, r21
 9f8:	f2 cf       	rjmp	.-28     	; 0x9de <__fp_split3+0xe>
 9fa:	46 95       	lsr	r20
 9fc:	f1 df       	rcall	.-30     	; 0x9e0 <__fp_splitA>
 9fe:	08 c0       	rjmp	.+16     	; 0xa10 <__fp_splitA+0x30>
 a00:	16 16       	cp	r1, r22
 a02:	17 06       	cpc	r1, r23
 a04:	18 06       	cpc	r1, r24
 a06:	99 1f       	adc	r25, r25
 a08:	f1 cf       	rjmp	.-30     	; 0x9ec <__fp_splitA+0xc>
 a0a:	86 95       	lsr	r24
 a0c:	71 05       	cpc	r23, r1
 a0e:	61 05       	cpc	r22, r1
 a10:	08 94       	sec
 a12:	08 95       	ret

00000a14 <__fp_zero>:
 a14:	e8 94       	clt

00000a16 <__fp_szero>:
 a16:	bb 27       	eor	r27, r27
 a18:	66 27       	eor	r22, r22
 a1a:	77 27       	eor	r23, r23
 a1c:	cb 01       	movw	r24, r22
 a1e:	97 f9       	bld	r25, 7
 a20:	08 95       	ret

00000a22 <__mulsf3>:
 a22:	0b d0       	rcall	.+22     	; 0xa3a <__mulsf3x>
 a24:	c4 cf       	rjmp	.-120    	; 0x9ae <__fp_round>
 a26:	b5 df       	rcall	.-150    	; 0x992 <__fp_pscA>
 a28:	28 f0       	brcs	.+10     	; 0xa34 <__mulsf3+0x12>
 a2a:	ba df       	rcall	.-140    	; 0x9a0 <__fp_pscB>
 a2c:	18 f0       	brcs	.+6      	; 0xa34 <__mulsf3+0x12>
 a2e:	95 23       	and	r25, r21
 a30:	09 f0       	breq	.+2      	; 0xa34 <__mulsf3+0x12>
 a32:	a6 cf       	rjmp	.-180    	; 0x980 <__fp_inf>
 a34:	ab cf       	rjmp	.-170    	; 0x98c <__fp_nan>
 a36:	11 24       	eor	r1, r1
 a38:	ee cf       	rjmp	.-36     	; 0xa16 <__fp_szero>

00000a3a <__mulsf3x>:
 a3a:	ca df       	rcall	.-108    	; 0x9d0 <__fp_split3>
 a3c:	a0 f3       	brcs	.-24     	; 0xa26 <__mulsf3+0x4>

00000a3e <__mulsf3_pse>:
 a3e:	95 9f       	mul	r25, r21
 a40:	d1 f3       	breq	.-12     	; 0xa36 <__mulsf3+0x14>
 a42:	95 0f       	add	r25, r21
 a44:	50 e0       	ldi	r21, 0x00	; 0
 a46:	55 1f       	adc	r21, r21
 a48:	62 9f       	mul	r22, r18
 a4a:	f0 01       	movw	r30, r0
 a4c:	72 9f       	mul	r23, r18
 a4e:	bb 27       	eor	r27, r27
 a50:	f0 0d       	add	r31, r0
 a52:	b1 1d       	adc	r27, r1
 a54:	63 9f       	mul	r22, r19
 a56:	aa 27       	eor	r26, r26
 a58:	f0 0d       	add	r31, r0
 a5a:	b1 1d       	adc	r27, r1
 a5c:	aa 1f       	adc	r26, r26
 a5e:	64 9f       	mul	r22, r20
 a60:	66 27       	eor	r22, r22
 a62:	b0 0d       	add	r27, r0
 a64:	a1 1d       	adc	r26, r1
 a66:	66 1f       	adc	r22, r22
 a68:	82 9f       	mul	r24, r18
 a6a:	22 27       	eor	r18, r18
 a6c:	b0 0d       	add	r27, r0
 a6e:	a1 1d       	adc	r26, r1
 a70:	62 1f       	adc	r22, r18
 a72:	73 9f       	mul	r23, r19
 a74:	b0 0d       	add	r27, r0
 a76:	a1 1d       	adc	r26, r1
 a78:	62 1f       	adc	r22, r18
 a7a:	83 9f       	mul	r24, r19
 a7c:	a0 0d       	add	r26, r0
 a7e:	61 1d       	adc	r22, r1
 a80:	22 1f       	adc	r18, r18
 a82:	74 9f       	mul	r23, r20
 a84:	33 27       	eor	r19, r19
 a86:	a0 0d       	add	r26, r0
 a88:	61 1d       	adc	r22, r1
 a8a:	23 1f       	adc	r18, r19
 a8c:	84 9f       	mul	r24, r20
 a8e:	60 0d       	add	r22, r0
 a90:	21 1d       	adc	r18, r1
 a92:	82 2f       	mov	r24, r18
 a94:	76 2f       	mov	r23, r22
 a96:	6a 2f       	mov	r22, r26
 a98:	11 24       	eor	r1, r1
 a9a:	9f 57       	subi	r25, 0x7F	; 127
 a9c:	50 40       	sbci	r21, 0x00	; 0
 a9e:	8a f0       	brmi	.+34     	; 0xac2 <__mulsf3_pse+0x84>
 aa0:	e1 f0       	breq	.+56     	; 0xada <__mulsf3_pse+0x9c>
 aa2:	88 23       	and	r24, r24
 aa4:	4a f0       	brmi	.+18     	; 0xab8 <__mulsf3_pse+0x7a>
 aa6:	ee 0f       	add	r30, r30
 aa8:	ff 1f       	adc	r31, r31
 aaa:	bb 1f       	adc	r27, r27
 aac:	66 1f       	adc	r22, r22
 aae:	77 1f       	adc	r23, r23
 ab0:	88 1f       	adc	r24, r24
 ab2:	91 50       	subi	r25, 0x01	; 1
 ab4:	50 40       	sbci	r21, 0x00	; 0
 ab6:	a9 f7       	brne	.-22     	; 0xaa2 <__mulsf3_pse+0x64>
 ab8:	9e 3f       	cpi	r25, 0xFE	; 254
 aba:	51 05       	cpc	r21, r1
 abc:	70 f0       	brcs	.+28     	; 0xada <__mulsf3_pse+0x9c>
 abe:	60 cf       	rjmp	.-320    	; 0x980 <__fp_inf>
 ac0:	aa cf       	rjmp	.-172    	; 0xa16 <__fp_szero>
 ac2:	5f 3f       	cpi	r21, 0xFF	; 255
 ac4:	ec f3       	brlt	.-6      	; 0xac0 <__mulsf3_pse+0x82>
 ac6:	98 3e       	cpi	r25, 0xE8	; 232
 ac8:	dc f3       	brlt	.-10     	; 0xac0 <__mulsf3_pse+0x82>
 aca:	86 95       	lsr	r24
 acc:	77 95       	ror	r23
 ace:	67 95       	ror	r22
 ad0:	b7 95       	ror	r27
 ad2:	f7 95       	ror	r31
 ad4:	e7 95       	ror	r30
 ad6:	9f 5f       	subi	r25, 0xFF	; 255
 ad8:	c1 f7       	brne	.-16     	; 0xaca <__mulsf3_pse+0x8c>
 ada:	fe 2b       	or	r31, r30
 adc:	88 0f       	add	r24, r24
 ade:	91 1d       	adc	r25, r1
 ae0:	96 95       	lsr	r25
 ae2:	87 95       	ror	r24
 ae4:	97 f9       	bld	r25, 7
 ae6:	08 95       	ret

00000ae8 <pow>:
 ae8:	fa 01       	movw	r30, r20
 aea:	ee 0f       	add	r30, r30
 aec:	ff 1f       	adc	r31, r31
 aee:	30 96       	adiw	r30, 0x00	; 0
 af0:	21 05       	cpc	r18, r1
 af2:	31 05       	cpc	r19, r1
 af4:	99 f1       	breq	.+102    	; 0xb5c <pow+0x74>
 af6:	61 15       	cp	r22, r1
 af8:	71 05       	cpc	r23, r1
 afa:	61 f4       	brne	.+24     	; 0xb14 <pow+0x2c>
 afc:	80 38       	cpi	r24, 0x80	; 128
 afe:	bf e3       	ldi	r27, 0x3F	; 63
 b00:	9b 07       	cpc	r25, r27
 b02:	49 f1       	breq	.+82     	; 0xb56 <pow+0x6e>
 b04:	68 94       	set
 b06:	90 38       	cpi	r25, 0x80	; 128
 b08:	81 05       	cpc	r24, r1
 b0a:	61 f0       	breq	.+24     	; 0xb24 <pow+0x3c>
 b0c:	80 38       	cpi	r24, 0x80	; 128
 b0e:	bf ef       	ldi	r27, 0xFF	; 255
 b10:	9b 07       	cpc	r25, r27
 b12:	41 f0       	breq	.+16     	; 0xb24 <pow+0x3c>
 b14:	99 23       	and	r25, r25
 b16:	42 f5       	brpl	.+80     	; 0xb68 <pow+0x80>
 b18:	ff 3f       	cpi	r31, 0xFF	; 255
 b1a:	e1 05       	cpc	r30, r1
 b1c:	31 05       	cpc	r19, r1
 b1e:	21 05       	cpc	r18, r1
 b20:	11 f1       	breq	.+68     	; 0xb66 <pow+0x7e>
 b22:	e8 94       	clt
 b24:	08 94       	sec
 b26:	e7 95       	ror	r30
 b28:	d9 01       	movw	r26, r18
 b2a:	aa 23       	and	r26, r26
 b2c:	29 f4       	brne	.+10     	; 0xb38 <pow+0x50>
 b2e:	ab 2f       	mov	r26, r27
 b30:	be 2f       	mov	r27, r30
 b32:	f8 5f       	subi	r31, 0xF8	; 248
 b34:	d0 f3       	brcs	.-12     	; 0xb2a <pow+0x42>
 b36:	10 c0       	rjmp	.+32     	; 0xb58 <pow+0x70>
 b38:	ff 5f       	subi	r31, 0xFF	; 255
 b3a:	70 f4       	brcc	.+28     	; 0xb58 <pow+0x70>
 b3c:	a6 95       	lsr	r26
 b3e:	e0 f7       	brcc	.-8      	; 0xb38 <pow+0x50>
 b40:	f7 39       	cpi	r31, 0x97	; 151
 b42:	50 f0       	brcs	.+20     	; 0xb58 <pow+0x70>
 b44:	19 f0       	breq	.+6      	; 0xb4c <pow+0x64>
 b46:	ff 3a       	cpi	r31, 0xAF	; 175
 b48:	38 f4       	brcc	.+14     	; 0xb58 <pow+0x70>
 b4a:	9f 77       	andi	r25, 0x7F	; 127
 b4c:	9f 93       	push	r25
 b4e:	0c d0       	rcall	.+24     	; 0xb68 <pow+0x80>
 b50:	0f 90       	pop	r0
 b52:	07 fc       	sbrc	r0, 7
 b54:	90 58       	subi	r25, 0x80	; 128
 b56:	08 95       	ret
 b58:	3e f0       	brts	.+14     	; 0xb68 <pow+0x80>
 b5a:	18 cf       	rjmp	.-464    	; 0x98c <__fp_nan>
 b5c:	60 e0       	ldi	r22, 0x00	; 0
 b5e:	70 e0       	ldi	r23, 0x00	; 0
 b60:	80 e8       	ldi	r24, 0x80	; 128
 b62:	9f e3       	ldi	r25, 0x3F	; 63
 b64:	08 95       	ret
 b66:	4f e7       	ldi	r20, 0x7F	; 127
 b68:	9f 77       	andi	r25, 0x7F	; 127
 b6a:	5f 93       	push	r21
 b6c:	4f 93       	push	r20
 b6e:	3f 93       	push	r19
 b70:	2f 93       	push	r18
 b72:	9e d0       	rcall	.+316    	; 0xcb0 <log>
 b74:	2f 91       	pop	r18
 b76:	3f 91       	pop	r19
 b78:	4f 91       	pop	r20
 b7a:	5f 91       	pop	r21
 b7c:	52 df       	rcall	.-348    	; 0xa22 <__mulsf3>
 b7e:	05 c0       	rjmp	.+10     	; 0xb8a <exp>
 b80:	19 f4       	brne	.+6      	; 0xb88 <pow+0xa0>
 b82:	0e f0       	brts	.+2      	; 0xb86 <pow+0x9e>
 b84:	fd ce       	rjmp	.-518    	; 0x980 <__fp_inf>
 b86:	46 cf       	rjmp	.-372    	; 0xa14 <__fp_zero>
 b88:	01 cf       	rjmp	.-510    	; 0x98c <__fp_nan>

00000b8a <exp>:
 b8a:	2a df       	rcall	.-428    	; 0x9e0 <__fp_splitA>
 b8c:	c8 f3       	brcs	.-14     	; 0xb80 <pow+0x98>
 b8e:	96 38       	cpi	r25, 0x86	; 134
 b90:	c0 f7       	brcc	.-16     	; 0xb82 <pow+0x9a>
 b92:	07 f8       	bld	r0, 7
 b94:	0f 92       	push	r0
 b96:	e8 94       	clt
 b98:	2b e3       	ldi	r18, 0x3B	; 59
 b9a:	3a ea       	ldi	r19, 0xAA	; 170
 b9c:	48 eb       	ldi	r20, 0xB8	; 184
 b9e:	5f e7       	ldi	r21, 0x7F	; 127
 ba0:	4e df       	rcall	.-356    	; 0xa3e <__mulsf3_pse>
 ba2:	0f 92       	push	r0
 ba4:	0f 92       	push	r0
 ba6:	0f 92       	push	r0
 ba8:	4d b7       	in	r20, 0x3d	; 61
 baa:	5e b7       	in	r21, 0x3e	; 62
 bac:	0f 92       	push	r0
 bae:	c0 d0       	rcall	.+384    	; 0xd30 <modf>
 bb0:	e4 ee       	ldi	r30, 0xE4	; 228
 bb2:	f0 e0       	ldi	r31, 0x00	; 0
 bb4:	16 d0       	rcall	.+44     	; 0xbe2 <__fp_powser>
 bb6:	4f 91       	pop	r20
 bb8:	5f 91       	pop	r21
 bba:	ef 91       	pop	r30
 bbc:	ff 91       	pop	r31
 bbe:	e5 95       	asr	r30
 bc0:	ee 1f       	adc	r30, r30
 bc2:	ff 1f       	adc	r31, r31
 bc4:	49 f0       	breq	.+18     	; 0xbd8 <exp+0x4e>
 bc6:	fe 57       	subi	r31, 0x7E	; 126
 bc8:	e0 68       	ori	r30, 0x80	; 128
 bca:	44 27       	eor	r20, r20
 bcc:	ee 0f       	add	r30, r30
 bce:	44 1f       	adc	r20, r20
 bd0:	fa 95       	dec	r31
 bd2:	e1 f7       	brne	.-8      	; 0xbcc <exp+0x42>
 bd4:	41 95       	neg	r20
 bd6:	55 0b       	sbc	r21, r21
 bd8:	32 d0       	rcall	.+100    	; 0xc3e <ldexp>
 bda:	0f 90       	pop	r0
 bdc:	07 fe       	sbrs	r0, 7
 bde:	26 c0       	rjmp	.+76     	; 0xc2c <inverse>
 be0:	08 95       	ret

00000be2 <__fp_powser>:
 be2:	df 93       	push	r29
 be4:	cf 93       	push	r28
 be6:	1f 93       	push	r17
 be8:	0f 93       	push	r16
 bea:	ff 92       	push	r15
 bec:	ef 92       	push	r14
 bee:	df 92       	push	r13
 bf0:	7b 01       	movw	r14, r22
 bf2:	8c 01       	movw	r16, r24
 bf4:	68 94       	set
 bf6:	05 c0       	rjmp	.+10     	; 0xc02 <__fp_powser+0x20>
 bf8:	da 2e       	mov	r13, r26
 bfa:	ef 01       	movw	r28, r30
 bfc:	1e df       	rcall	.-452    	; 0xa3a <__mulsf3x>
 bfe:	fe 01       	movw	r30, r28
 c00:	e8 94       	clt
 c02:	a5 91       	lpm	r26, Z+
 c04:	25 91       	lpm	r18, Z+
 c06:	35 91       	lpm	r19, Z+
 c08:	45 91       	lpm	r20, Z+
 c0a:	55 91       	lpm	r21, Z+
 c0c:	ae f3       	brts	.-22     	; 0xbf8 <__fp_powser+0x16>
 c0e:	ef 01       	movw	r28, r30
 c10:	8e dd       	rcall	.-1252   	; 0x72e <__addsf3x>
 c12:	fe 01       	movw	r30, r28
 c14:	97 01       	movw	r18, r14
 c16:	a8 01       	movw	r20, r16
 c18:	da 94       	dec	r13
 c1a:	79 f7       	brne	.-34     	; 0xbfa <__fp_powser+0x18>
 c1c:	df 90       	pop	r13
 c1e:	ef 90       	pop	r14
 c20:	ff 90       	pop	r15
 c22:	0f 91       	pop	r16
 c24:	1f 91       	pop	r17
 c26:	cf 91       	pop	r28
 c28:	df 91       	pop	r29
 c2a:	08 95       	ret

00000c2c <inverse>:
 c2c:	9b 01       	movw	r18, r22
 c2e:	ac 01       	movw	r20, r24
 c30:	60 e0       	ldi	r22, 0x00	; 0
 c32:	70 e0       	ldi	r23, 0x00	; 0
 c34:	80 e8       	ldi	r24, 0x80	; 128
 c36:	9f e3       	ldi	r25, 0x3F	; 63
 c38:	cd cd       	rjmp	.-1126   	; 0x7d4 <__divsf3>
 c3a:	a2 ce       	rjmp	.-700    	; 0x980 <__fp_inf>
 c3c:	ac c0       	rjmp	.+344    	; 0xd96 <__fp_mpack>

00000c3e <ldexp>:
 c3e:	d0 de       	rcall	.-608    	; 0x9e0 <__fp_splitA>
 c40:	e8 f3       	brcs	.-6      	; 0xc3c <inverse+0x10>
 c42:	99 23       	and	r25, r25
 c44:	d9 f3       	breq	.-10     	; 0xc3c <inverse+0x10>
 c46:	94 0f       	add	r25, r20
 c48:	51 1d       	adc	r21, r1
 c4a:	bb f3       	brvs	.-18     	; 0xc3a <inverse+0xe>
 c4c:	91 50       	subi	r25, 0x01	; 1
 c4e:	50 40       	sbci	r21, 0x00	; 0
 c50:	94 f0       	brlt	.+36     	; 0xc76 <ldexp+0x38>
 c52:	59 f0       	breq	.+22     	; 0xc6a <ldexp+0x2c>
 c54:	88 23       	and	r24, r24
 c56:	32 f0       	brmi	.+12     	; 0xc64 <ldexp+0x26>
 c58:	66 0f       	add	r22, r22
 c5a:	77 1f       	adc	r23, r23
 c5c:	88 1f       	adc	r24, r24
 c5e:	91 50       	subi	r25, 0x01	; 1
 c60:	50 40       	sbci	r21, 0x00	; 0
 c62:	c1 f7       	brne	.-16     	; 0xc54 <ldexp+0x16>
 c64:	9e 3f       	cpi	r25, 0xFE	; 254
 c66:	51 05       	cpc	r21, r1
 c68:	44 f7       	brge	.-48     	; 0xc3a <inverse+0xe>
 c6a:	88 0f       	add	r24, r24
 c6c:	91 1d       	adc	r25, r1
 c6e:	96 95       	lsr	r25
 c70:	87 95       	ror	r24
 c72:	97 f9       	bld	r25, 7
 c74:	08 95       	ret
 c76:	5f 3f       	cpi	r21, 0xFF	; 255
 c78:	ac f0       	brlt	.+42     	; 0xca4 <ldexp+0x66>
 c7a:	98 3e       	cpi	r25, 0xE8	; 232
 c7c:	9c f0       	brlt	.+38     	; 0xca4 <ldexp+0x66>
 c7e:	bb 27       	eor	r27, r27
 c80:	86 95       	lsr	r24
 c82:	77 95       	ror	r23
 c84:	67 95       	ror	r22
 c86:	b7 95       	ror	r27
 c88:	08 f4       	brcc	.+2      	; 0xc8c <ldexp+0x4e>
 c8a:	b1 60       	ori	r27, 0x01	; 1
 c8c:	93 95       	inc	r25
 c8e:	c1 f7       	brne	.-16     	; 0xc80 <ldexp+0x42>
 c90:	bb 0f       	add	r27, r27
 c92:	58 f7       	brcc	.-42     	; 0xc6a <ldexp+0x2c>
 c94:	11 f4       	brne	.+4      	; 0xc9a <ldexp+0x5c>
 c96:	60 ff       	sbrs	r22, 0
 c98:	e8 cf       	rjmp	.-48     	; 0xc6a <ldexp+0x2c>
 c9a:	6f 5f       	subi	r22, 0xFF	; 255
 c9c:	7f 4f       	sbci	r23, 0xFF	; 255
 c9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ca0:	9f 4f       	sbci	r25, 0xFF	; 255
 ca2:	e3 cf       	rjmp	.-58     	; 0xc6a <ldexp+0x2c>
 ca4:	b8 ce       	rjmp	.-656    	; 0xa16 <__fp_szero>
 ca6:	0e f0       	brts	.+2      	; 0xcaa <ldexp+0x6c>
 ca8:	76 c0       	rjmp	.+236    	; 0xd96 <__fp_mpack>
 caa:	70 ce       	rjmp	.-800    	; 0x98c <__fp_nan>
 cac:	68 94       	set
 cae:	68 ce       	rjmp	.-816    	; 0x980 <__fp_inf>

00000cb0 <log>:
 cb0:	97 de       	rcall	.-722    	; 0x9e0 <__fp_splitA>
 cb2:	c8 f3       	brcs	.-14     	; 0xca6 <ldexp+0x68>
 cb4:	99 23       	and	r25, r25
 cb6:	d1 f3       	breq	.-12     	; 0xcac <ldexp+0x6e>
 cb8:	c6 f3       	brts	.-16     	; 0xcaa <ldexp+0x6c>
 cba:	df 93       	push	r29
 cbc:	cf 93       	push	r28
 cbe:	1f 93       	push	r17
 cc0:	0f 93       	push	r16
 cc2:	ff 92       	push	r15
 cc4:	c9 2f       	mov	r28, r25
 cc6:	dd 27       	eor	r29, r29
 cc8:	88 23       	and	r24, r24
 cca:	2a f0       	brmi	.+10     	; 0xcd6 <log+0x26>
 ccc:	21 97       	sbiw	r28, 0x01	; 1
 cce:	66 0f       	add	r22, r22
 cd0:	77 1f       	adc	r23, r23
 cd2:	88 1f       	adc	r24, r24
 cd4:	da f7       	brpl	.-10     	; 0xccc <log+0x1c>
 cd6:	20 e0       	ldi	r18, 0x00	; 0
 cd8:	30 e0       	ldi	r19, 0x00	; 0
 cda:	40 e8       	ldi	r20, 0x80	; 128
 cdc:	5f eb       	ldi	r21, 0xBF	; 191
 cde:	9f e3       	ldi	r25, 0x3F	; 63
 ce0:	88 39       	cpi	r24, 0x98	; 152
 ce2:	20 f0       	brcs	.+8      	; 0xcec <log+0x3c>
 ce4:	80 3e       	cpi	r24, 0xE0	; 224
 ce6:	30 f0       	brcs	.+12     	; 0xcf4 <log+0x44>
 ce8:	21 96       	adiw	r28, 0x01	; 1
 cea:	8f 77       	andi	r24, 0x7F	; 127
 cec:	0f dd       	rcall	.-1506   	; 0x70c <__addsf3>
 cee:	ec e0       	ldi	r30, 0x0C	; 12
 cf0:	f1 e0       	ldi	r31, 0x01	; 1
 cf2:	03 c0       	rjmp	.+6      	; 0xcfa <log+0x4a>
 cf4:	0b dd       	rcall	.-1514   	; 0x70c <__addsf3>
 cf6:	e9 e3       	ldi	r30, 0x39	; 57
 cf8:	f1 e0       	ldi	r31, 0x01	; 1
 cfa:	73 df       	rcall	.-282    	; 0xbe2 <__fp_powser>
 cfc:	8b 01       	movw	r16, r22
 cfe:	be 01       	movw	r22, r28
 d00:	ec 01       	movw	r28, r24
 d02:	fb 2e       	mov	r15, r27
 d04:	6f 57       	subi	r22, 0x7F	; 127
 d06:	71 09       	sbc	r23, r1
 d08:	75 95       	asr	r23
 d0a:	77 1f       	adc	r23, r23
 d0c:	88 0b       	sbc	r24, r24
 d0e:	99 0b       	sbc	r25, r25
 d10:	fc dd       	rcall	.-1032   	; 0x90a <__floatsisf>
 d12:	28 e1       	ldi	r18, 0x18	; 24
 d14:	32 e7       	ldi	r19, 0x72	; 114
 d16:	41 e3       	ldi	r20, 0x31	; 49
 d18:	5f e3       	ldi	r21, 0x3F	; 63
 d1a:	8f de       	rcall	.-738    	; 0xa3a <__mulsf3x>
 d1c:	af 2d       	mov	r26, r15
 d1e:	98 01       	movw	r18, r16
 d20:	ae 01       	movw	r20, r28
 d22:	ff 90       	pop	r15
 d24:	0f 91       	pop	r16
 d26:	1f 91       	pop	r17
 d28:	cf 91       	pop	r28
 d2a:	df 91       	pop	r29
 d2c:	00 dd       	rcall	.-1536   	; 0x72e <__addsf3x>
 d2e:	3f ce       	rjmp	.-898    	; 0x9ae <__fp_round>

00000d30 <modf>:
 d30:	fa 01       	movw	r30, r20
 d32:	dc 01       	movw	r26, r24
 d34:	aa 0f       	add	r26, r26
 d36:	bb 1f       	adc	r27, r27
 d38:	9b 01       	movw	r18, r22
 d3a:	ac 01       	movw	r20, r24
 d3c:	bf 57       	subi	r27, 0x7F	; 127
 d3e:	28 f4       	brcc	.+10     	; 0xd4a <modf+0x1a>
 d40:	22 27       	eor	r18, r18
 d42:	33 27       	eor	r19, r19
 d44:	44 27       	eor	r20, r20
 d46:	50 78       	andi	r21, 0x80	; 128
 d48:	1f c0       	rjmp	.+62     	; 0xd88 <modf+0x58>
 d4a:	b7 51       	subi	r27, 0x17	; 23
 d4c:	88 f4       	brcc	.+34     	; 0xd70 <modf+0x40>
 d4e:	ab 2f       	mov	r26, r27
 d50:	00 24       	eor	r0, r0
 d52:	46 95       	lsr	r20
 d54:	37 95       	ror	r19
 d56:	27 95       	ror	r18
 d58:	01 1c       	adc	r0, r1
 d5a:	a3 95       	inc	r26
 d5c:	d2 f3       	brmi	.-12     	; 0xd52 <modf+0x22>
 d5e:	00 20       	and	r0, r0
 d60:	69 f0       	breq	.+26     	; 0xd7c <modf+0x4c>
 d62:	22 0f       	add	r18, r18
 d64:	33 1f       	adc	r19, r19
 d66:	44 1f       	adc	r20, r20
 d68:	b3 95       	inc	r27
 d6a:	da f3       	brmi	.-10     	; 0xd62 <modf+0x32>
 d6c:	0d d0       	rcall	.+26     	; 0xd88 <modf+0x58>
 d6e:	cd cc       	rjmp	.-1638   	; 0x70a <__subsf3>
 d70:	61 30       	cpi	r22, 0x01	; 1
 d72:	71 05       	cpc	r23, r1
 d74:	a0 e8       	ldi	r26, 0x80	; 128
 d76:	8a 07       	cpc	r24, r26
 d78:	b9 46       	sbci	r27, 0x69	; 105
 d7a:	30 f4       	brcc	.+12     	; 0xd88 <modf+0x58>
 d7c:	9b 01       	movw	r18, r22
 d7e:	ac 01       	movw	r20, r24
 d80:	66 27       	eor	r22, r22
 d82:	77 27       	eor	r23, r23
 d84:	88 27       	eor	r24, r24
 d86:	90 78       	andi	r25, 0x80	; 128
 d88:	30 96       	adiw	r30, 0x00	; 0
 d8a:	21 f0       	breq	.+8      	; 0xd94 <modf+0x64>
 d8c:	20 83       	st	Z, r18
 d8e:	31 83       	std	Z+1, r19	; 0x01
 d90:	42 83       	std	Z+2, r20	; 0x02
 d92:	53 83       	std	Z+3, r21	; 0x03
 d94:	08 95       	ret

00000d96 <__fp_mpack>:
 d96:	9f 3f       	cpi	r25, 0xFF	; 255
 d98:	31 f0       	breq	.+12     	; 0xda6 <__fp_mpack_finite+0xc>

00000d9a <__fp_mpack_finite>:
 d9a:	91 50       	subi	r25, 0x01	; 1
 d9c:	20 f4       	brcc	.+8      	; 0xda6 <__fp_mpack_finite+0xc>
 d9e:	87 95       	ror	r24
 da0:	77 95       	ror	r23
 da2:	67 95       	ror	r22
 da4:	b7 95       	ror	r27
 da6:	88 0f       	add	r24, r24
 da8:	91 1d       	adc	r25, r1
 daa:	96 95       	lsr	r25
 dac:	87 95       	ror	r24
 dae:	97 f9       	bld	r25, 7
 db0:	08 95       	ret

00000db2 <__umulhisi3>:
 db2:	a2 9f       	mul	r26, r18
 db4:	b0 01       	movw	r22, r0
 db6:	b3 9f       	mul	r27, r19
 db8:	c0 01       	movw	r24, r0
 dba:	a3 9f       	mul	r26, r19
 dbc:	01 d0       	rcall	.+2      	; 0xdc0 <__umulhisi3+0xe>
 dbe:	b2 9f       	mul	r27, r18
 dc0:	70 0d       	add	r23, r0
 dc2:	81 1d       	adc	r24, r1
 dc4:	11 24       	eor	r1, r1
 dc6:	91 1d       	adc	r25, r1
 dc8:	08 95       	ret

00000dca <_exit>:
 dca:	f8 94       	cli

00000dcc <__stop_program>:
 dcc:	ff cf       	rjmp	.-2      	; 0xdcc <__stop_program>
